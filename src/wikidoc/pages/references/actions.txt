'''
WikiDoc:Doc
WikiDoc:Context:References
WikiDoc:Page:Actions-Overview
WikiDoc:TOCTitle:Description of ORCA Actions, Commands, Functions and Gestures and Options
Actions are one of the core components of ORCA. Actions can be trigered by buttons, at startup of Orca, or by interfaces. By using actions, you can show pages on the screen, send commandos to interfaces or change the style of Textfields. You can combine actions to macro style command sets, call them like functions, and execute them based on options. There is a set of standard commands available, which you can extend by (your) custom commands.

WikiDoc:TOC:ActionsExplained:List:sorted


WikiDoc:End
'''

'''
WikiDoc:Doc
WikiDoc:Context:ActionsExplained
WikiDoc:Page:Actions-Files
WikiDoc:TOCTitle:Action Files
There are several files, where actions are defined:

= actions.xml =

The actions.xml is the main file, which defines, which action files should be loaded. It is a standard system file, so you should not change it.

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
<?xml version="1.0" encoding="UTF-8"?>
  <!-- It is NOT wise to change this document, change the custom include files instead!! -->
<ORCA>
  <!--Actions to be started, when a page is displayed. If 'page name' is 'appstart',
        the actions will be executed before the first page is displayed -->

  <pagestartactions xmlns:xi="http://www.w3.org/2001/XInclude">
    <xi:include href="$var(ACTIONPATH)/standardpagestartactions.xml" parse="xml" condition="$var(ORCASTANDARDPAGESTARTACTIONSINCLUDED)!=1"/>
    <xi:include href="$var(DEFINITIONPATH)/actions/custompagestartactions.xml" parse="xml" />
  </pagestartactions>

  <!-- Actions which can be assigned to buttons -->
  <actions xmlns:xi="http://www.w3.org/2001/XInclude">
    <xi:include href="$var(ACTIONPATH)/standardactions.xml" parse="xml" condition="$var(ORCASTANDARDACTIONSINCLUDED)!=1"/>
    <xi:include href="$var(DEFINITIONPATH)/actions/customactions.xml" parse="xml" />
  </actions>
</ORCA>
</syntaxhighlight></div>

You see, that four files are loaded to define your action structure:

* standardpagestartactions.xml: These are system wide actions, which will be executed at systemstart or when pages are displayed or stopped: This file is located in the [orca_root]\actions path. You should not modify this file, it will be replaced by the next update.
* custompagestartactions.xml: These are your custom / definion actions, which will be executed at systemstart or when pages are displayed or stopped: This file is located in the [orca_root]\definitions\[definition name]\actions path. You can modify this file as you like.
* standardactions.xml: These are system wide actions, which you can call by your buttons. This file is located in the [orca_root]\actions path. You should not modify this file, it will be replaced by the next update.
* customactions.xml: These are your custom / definition actions, which you can call by your buttons. This file is located in the [orca_root]\definitions\[definition name]\actions path. You can modify this file as you like.

= Internal action files =

Most of the internal startup actions are triggered by actions files as well. Those should never be changed.
*actionsearly.xml: This triggers all major startup actions
*actionsfallback: This triggers the downloading of the core ORCA files at first application start

= Pagestartactions =

Page start actions are actions, that will be loaded at systemstart, after the defition has been load, or before a specific page is displayed. While the standardpagestartactions are currently empty, is the custompagestartactions a very important file. As nothing is fixed in ORCA, you need to tell ORCA, which is the first page to display. This can be done by settinge the DEFINITIONSTARTPAGE var to the name of the page you would like to start with. A "showpage" command will be added to the end of the definitionstart by ORCA. And you might need to initalize your custom variables here.

A typical custompagestartactions.xml file might look like this:

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
<?xml version="1.0" encoding="UTF-8"?>
<includes>
  <pagestartaction name="appstart">
    <action name="" string="setvar" varname="POWERSTATUS_$dvar(definition_alias_firetv)" varvalue="OFF" />

    <action name="Check if we have a first app start" string="if $var(STARTCOUNT)==1"/>
      <action name="" string="getsaveorcasetting" configtype="$var(DEFINITIONNAME)" varname="$dvar(definition_alias_firetv)_INTERFACE_MAIN"        varvalue="android_adb" />
      <action name="" string="getsaveorcasetting" configtype="$var(DEFINITIONNAME)" varname="$dvar(definition_alias_firetv)_CONFIGNAME_MAIN"       varvalue="DEVICE_$dvar(definition_alias_firetv)" />
      <action name="" string="getsaveorcasetting" configtype="$var(DEFINITIONNAME)" varname="$dvar(definition_alias_firetv)_INTERFACE_POWERON"     varvalue="android_adb" />
      <action name="" string="getsaveorcasetting" configtype="$var(DEFINITIONNAME)" varname="$dvar(definition_alias_firetv)_CONFIGNAME_POWERON"    varvalue="DEVICE_$dvar(definition_alias_firetv)" />
      <action name="" string="getsaveorcasetting" configtype="$var(DEFINITIONNAME)" varname="$dvar(definition_alias_firetv)_INTERFACE_VOLUME"      varvalue="android_adb" />
      <action name="" string="getsaveorcasetting" configtype="$var(DEFINITIONNAME)" varname="$dvar(definition_alias_firetv)_CONFIGNAME_VOLUME"     varvalue="DEVICE_$dvar(definition_alias_firetv)" />
      <action name="" string="endif" />
  </pagestartaction>

  <pagestartaction name="definitionstart">
    <action name="" string="setvar" varname="DEFINITIONSTARTPAGE" varvalue="Page_Device_$dvar(definition_alias_firetv)" />
    <action name="Remove the tv channels settings from the imported setting"    string="removedefinitionsetting" definitionname="$dvar(definition_alias_tvfavorites_template)"/>
    <action name="Remove the Layout Control settings from the imported setting" string="removedefinitionsetting" definitionname="$dvar(definition_alias_firetv)_mediaplayer_template" settingname="$lvar(mediaplayertemplate_10064) ($dvar(definition_alias_mediaplayer_template))"/>
    <action name="Remove the Color Bar settings from the imported setting"      string="removedefinitionsetting" definitionname="$dvar(definition_alias_firetv)_mediaplayer_template" settingname="$lvar(mediaplayertemplate_10006) ($dvar(definition_alias_mediaplayer_template))"/>
  </pagestartaction>

  <pagestartaction name="Page_Device_$dvar(definition_alias_firetv)">
    <action name="" string="call PageStart Page_Device_$dvar(definition_alias_firetv)" />
  </pagestartaction>
</includes>
</syntaxhighlight></div>


Some explanation to this:

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
<pagestartaction name='appstart'>
<pagestartaction name='definitionstart'>
</syntaxhighlight></div>

This defines, where to execute the pagestartactions.

* "appstart": The actions will be executed right at start of the application.
* "definitionstart'": The actions will be executed after the definition is loaded. THIS IS PLACE, WHERE YOU HAVE TO DEFINE, WHICH IS THE FIRST PAGE TO SHOW.
* "xxxxx": If you provide a proper page name, the actions will be executed before the page is displayed.

You can add pagestopactions as well, which then will be executed, before a page is removed from the screen

== appstart actions ==

Some more words to the example above, to the appstart actions:

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
<action name="" string="setvar" varname="POWERSTATUS_$dvar(definition_alias_mediaplayer_template)" varvalue="OFF" />
<action name="" string="modifyvar" varname="inputstring"  operator="load" parameter1="" parameter2="$dvar(definition_alias_mediaplayer_template)"/>
</syntaxhighlight></div>

These initally sets the power status of your devices, or the status of your actions. This is helpful, if you have devices, which have the same command to toggle the power status. You might also prevent to execute some actions twice, when you re-enter your activities page.

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
<action name="" string="getsaveorcasetting" configtype="$var(DEFINITIONNAME)" varname="$dvar(definition_alias_firetv)_INTERFACE_MAIN"        varvalue="android_adb" />
<action name="" string="getsaveorcasetting" configtype="$var(DEFINITIONNAME)" varname="$dvar(definition_alias_firetv)_CONFIGNAME_MAIN"       varvalue="DEVICE_$dvar(definition_devicename_firetv)" />
</syntaxhighlight></div>


This lines initializes the interfaces to use to a default value. The user can change this using the settings pages

== definitionstart actions ==

The definition start actions will be executed, after the definiton has been loaded. You need to set the DEFINITIONSTARTPAGE variable, which define the first page to shaw

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
<action name="" string="setvar" varname="DEFINITIONSTARTPAGE" varvalue="Page_Main" />
</syntaxhighlight></div>

Here you see, that the first page to start is a page named "Page_Main"

= Actions =

Actions are either standard actions or custom actions. Standard actions are a set of generic actions, which are stored in the standardactions.xml file, which you can find in the [orca_root]\actions path. You should never change this file. A (short) example could look like this:

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
<?xml version="1.0" encoding="UTF-8"?>
  <includes>
   <action name="StopApp" string="stopapp" />
   <action name="Show Page" string="showpage" />
   <action name="Set Focus" string="setfocus" />
   <action name="NoAction" string="noaction" />
   <action name="Update Page Clocks" string="updatewidget {pageclocks}" />
   <action name="Send Power Toggle" string="sendcommand" commandname="power_toggle" />
   <action name="Send Power On" string="sendcommand" commandname="power_on" />
   <action name="Send Power Off" string="sendcommand" commandname="power_off" />
   <action name="Send OK" string="sendcommand" commandname="ok" />
  </includes>
</syntaxhighlight></div>

Custom actions are stored in the the customactions.xml file, which you can find in the [orca_root]\definitions\[definition name]\actions path. Here you define all your your actions, which are specific to your definition or are missing in the standardactions file. Such a file could look like this:

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
?xml version="1.0" encoding="UTF-8"?>
<includes  xmlns:xi="http://www.w3.org/2001/XInclude">
    <action name="Send Start Kodi $dvar(definition_alias_enigma2)">
       <action name="" string="setvar" varname="startapp" varvalue="kodi" />
       <action name="" string="sendcommand" commandname="startapp" interface="$var($dvar(definition_alias_enigma2)_INTERFACE_ROOT)" configname="$var($dvar(definition_devicename_enigma2)_CONFIGNAME_ROOT)" />
   </action>
    <action name="FKT SwitchOn $dvar(definition_alias_enigma2)">
        <!-- Original wakeup will be valled first by default, so we just add the second stuff-->
        <action name="Call Web PowerOn (even if fails)" string="sendcommand" commandname="power_on"  interface="$var($dvar(definition_alias_enigma2)_INTERFACE_MAIN)" configname="$var($dvar(definition_devicename_enigma2)_CONFIGNAME_MAIN)" condition="$var(POWERSTATUS_$dvar(definition_devicename_enigma2))==OFF"   />
    </action>
    <action name="FKT SwitchOn $dvar(definition_alias_enigma2) Force">
        <!-- Original wakeup will be valled first by default, so we just add the second stuff-->
        <action name="Call Web PowerOn (even if fails)" string="sendcommand" commandname="power_on"  interface="$var($dvar(definition_alias_enigma2)_INTERFACE_MAIN)"  configname="$var($dvar(definition_devicename_enigma2)_CONFIGNAME_MAIN)"/>
    </action>
</includes>

</syntaxhighlight></div>

WikiDoc:End
'''

'''
WikiDoc:Doc
WikiDoc:Context:ActionsExplained
WikiDoc:Page:Actions-Commands
WikiDoc:TOCTitle:Action Commands and Options

= Action parameter =
You can specify several parameter for actions:

<div style="overflow:auto; ">
{| class="wikitable"
! align="left" | Attribute
! align="left" | Description
|-
|name
|The name of the action. The name can be empty in elements of multiline line actions. For all others, you have to provide a name for the action
|-
|string
|The action type. Please refer to the list below for valid action types
|-
|taptype
|For button actions. Defines, if the action will be triggered by single taps, double taps or by both. Could be "single", "double" or "both"
|-
|interface
|Sets the interface for this action. You can either use the direct interface name, or, even better, use a variable which points to the interface name. Please refer to section "Variables" to understand, how to use variables. You should just set the interface, if it is different from the page default interface or from the anchor interface.
|-
|configname
|Sets the configuration for this action. You can either use the direct configuraton name, or, even better, use a variable which points to the configuration name. Please refer to section "Variables" to understand, how to use variables. You should just set the configuration name, if it is different from the page default configuration or from the anchor configuration.
|-
|conditionchecktype
|If you want to set a condition for this action, you can specify the type of the condition. Please refer to section Conditions below.
|-
|conditionvar
|For conditions, this is the variable to verify for the condition. Please refer to section Conditions below.
|-
|conditionvalue
|For conditions, this is the value to verify for the condition. Please refer to section Conditions below.
|-
|retvar
|The variable name, where the result of the acxtion should be stored
|-
|force
|The action will not be queued in, instead it will be executed immediatly
|}</div>

= Single line actions =

A simple action could contain just a single line:

<nowiki><action name="Send Get Volume Sub" string="sendcommand" commandname="getvolumesub" retvar="$var(currentvolumesub)"/></nowiki>

For single line actions, the name parameter is mandantory, otherwise you cannot reference them.

= Multi line actions / Macros =

Multiline actions are a set of actions. They are similar to macros. An example could look like this.

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
<action name="FKT SwitchOn $dvar(definition_alias_enigma2)">
    <!-- Original wakeup will be valled first by default, so we just add the second stuff-->
    <action name="Call Web PowerOn (even if fails)" string="sendcommand" commandname="power_on"  interface="$var($dvar(definition_alias_enigma2)_INTERFACE_MAIN)" configname="$var($dvar(definition_devicename_enigma2)_CONFIGNAME_MAIN)" condition="$var(POWERSTATUS_$dvar(definition_devicename_enigma2))==OFF"   />
</action>
</syntaxhighlight></div>


= Actions as functions =

You can use every action like a function. Use the call action to call other actions. If you call an action, the calling action continues after the called action is finished. You can nest calling actions, so be aware of endless loops

= Conditions =

You can add a condition to an action, to prevent / allow execution based on the status of a variable. If the condition evaluates to True, the action will executed, otherwise it will be skipped.


<div style="overflow:auto; ">
{| class="wikitable"
! align="left" | Attribute
! align="left" | Description
|-
|conditionchecktype
|Defines how the variables should be compared: Can be one of the following:
* '==' for equal
* '!='  for unequal
For variables, which presents a number
* '>' for greater
* '>=' for greater or equal
* '<' for smaleer
* '<=' for smaller or equal

|-
|conditionvar
|A valid variable to check for
|-
|conditionvalue
|A valid variable or constant to check against
|-
|condition
|This is the combined, better readable version for conditions. As long as your variable names do not include special characters, you can use this syntax
|}</div>

All variables will be compared as strings! An example could look like this:

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
 <action string='sendcommand' par1='power_toggle' conditionchecktype='==' conditionvar='$var(POWERSTATUS_TV)' conditionvalue='ON' />
</syntaxhighlight></div>

or

<div style="overflow-x: auto;"><syntaxhighlight  lang="xml">
 <action string='sendcommand' par1='power_toggle' condition='$var(POWERSTATUS_TV)==ON' />
</syntaxhighlight></div>

= Action Types =

Below you an overview of all valid action types

WikiDoc:TOC:ActionsDetails:List:sorted

WikiDoc:End
'''

'''
WikiDoc:Doc
WikiDoc:Context:ActionsExplained
WikiDoc:Page:Gestures
WikiDoc:TOCTitle:Gestures

There are several files, where gestures are defined:

= gestures.xml =

The gestures.xml is the main file, which defines, which gesture files should be loaded. It is a standard system file, so you should not change it.

 <nowiki><?xml version="1.0" encoding="UTF-8"?>
<ORCA>
    <gestures xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:include href="$var(ACTIONPATH)/standardgestures.xml" parse="xml"></xi:include>
        <xi:include href="$var(DEFINITIONPATH)/actions/customgestures.xml" parse="xml"></xi:include>
    </gestures>
</ORCA></nowiki>

You see, that two files are loaded to define your gestures structure:

* standardgestures.xml: These are system wide gestures, which you can assign to your pages. This file is located in the [orca_root]\actions path. You should not modify this file, it will be replaced by the next update.
* customgestures.xml: These are your custom / definion gestures, which you can assign to your pages. This file is located in the [orca_root]\definitions\[definition name]\actions path. You can modify this file as you like.

= Gestures =

Gestures are either standard gestures or custom gestures. Standard gestrues are a set generic gestures, which are stored in the standardgestures.xml file, which you can find in the [orca_root]\actions path. You should never change this file. A (short) example could look like this:

 <nowiki><?xml version="1.0" encoding="UTF-8"?>
<includes>
 <gesture name='wiperight' data='eNq1l8Fu2zAM .... /AYzisfI=' />
 <gesture name='wipeleft'  data='eNq1l91uGjERE.....rhc/AVBXgGI=' />
 <gesture name='wipedown'  data=hfHp621WOFSHYZ.....YlnB57H4B7waqdw==' />
 <gesture name='wipeup'    data='eNq1l0tu2zAQh...eNZOHzZ/gFna8z5' />
</includes></nowiki>

There are just two parameter to define a gesture:

* name: The name of the gesture
* data: A binary representation of the gesture (see section Recording Gestures below)


Custom gestures are stored in the the customgestures.xml file, which you can find in the [orca_root]\definitions\[definition name]\actions path. Here you define all your your gestures, which are specific to your definition or are missing in the standardgestures file. It has the same structure as the standard gestrures xml file.

You can replace standard actions by redefining them in the customer actions xml file.

= Assigning Gestures =

Gestures can be assigned to backgrounds and widgets. (currently only backgrounds are supported). If you perform a gesture on background or widget, Orca validates, if a gesture for that has been defined and then call the assigned action.
Gestures will be assigned by using the action "addgesture". For background this should be part of the pagestartactions.

= Recording Gestures =

Gestures can be recorded by the ORCA gesture recorder. It can be found in the settings dialog in the tools section

= Standard ORCA Gestures =

There is a set of predefined standard gestures available to integrate them into a definition

{| cellpadding="2" style="border: 1px solid darkgray;"
! width="110" |
! width="110" |
! width="130" |
! width="130" |
|- border="0" - align="center"
|http://www.orca-remote.org/images/gestures/gesture_check_left_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_check_right_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_circletopclockwise_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_circlebottomclockwise_thumb.png
|- align="center"
| markleft || markright ||  circletopclockwise||circlebottomclockwise
|- border="0" - align="center"
|http://www.orca-remote.org/images/gestures/gesture_move_right_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_move_left_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_move_up_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_move_down_thumb.png
|- align="center"
| wiperighttoleft ||wipelefttoright || wipedowntoup|| wipeuptodown
|- border="0" - align="center"
|http://www.orca-remote.org/images/gestures/gesture_squaretoprightclockwise_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_squarebottomrightclockwise_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_squarebottomleftclockwise_thumb.png
|http://www.orca-remote.org/images/gestures/gesture_squaretopleftclockwise_thumb.png
|- align="center"
| squarerighttopclockwise ||squarerightbottomclockwise || squareleftbottomclockwise|| squarelefttopclockwise
|}

WikiDoc:End
'''
